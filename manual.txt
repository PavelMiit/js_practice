!			***Переменные и константы***

LET и var - объявляет переменную, но можно менять значение переменной    
имя переменной начинается ТОЛЬКО:
				 с букв
				 "$" 
			         "_"   
Имя переменной может содержать цифры.

CONST      - объявляет константу, ту же переменную, но изменить значение 
	     нельзя.
Пример:
	let age = 34;  // назначил переменную
   
  
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
!                             ***Типы Данных*** 
Number  - числа
	- целые = 42 //integer
	- десятичные (с плавающей запятой) = 42.42 //float
	- NaN (Not a Number) ошибка вычисления;
	- inf (Infinity=бесконечность) прим: let inf = 1 / 0; 

BigInt - очень большие числа. В конце каждого числа стоит "n" 
	 Работает только с таким же типом даных. 

String - строка. Обязательно в 'ковычках'	

Boolean - логика.
	- true - истина;
	- false - ложь;
			   Булевая логика:

		&& //expr1 && expr2// - Логическое И
		|| //expr1 || expr2// - Логическое ИЛИ
		!  //!expr//          - Логическое НЕ

Null - значение пустое или неизвестно;

Undefined - неопределено. Переменная объявлена, но значение 
	    не установленно;    	

Object - объект.
	let monitor = {
	   name: 'SMATRON',
	   ewight: 3.3,
	   resolution: 27,
	   rotate: false
	};

Symbol - уникальное значение.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
                                    ***Массив*** 
-одномерный (простое значение); 
	пример: let arr = ['PNH', 'kar-kar', '1XBET'];
arr[номер(индекс) ячейки)] - доступ к ячейке внутри массива, 
		             нумерация с 0. 
	arr[0] = 'Porsche' - заменит 'PNH' на 'Porsche' в массиве arr
	arr[3] = 'Mazda' - добавит 'Mazda' в массив arr   
	arr[arr.length] = 'Жигули' - добавит 'Жигули' в конец массива	
	arr.shift()  - удалит первый элемент из массива

- двумерный (значение - другой одномерный массив);
	пример: arr = [['pnh', 'kar-kar', '1XBET'], 
	       ['Kompot', 'Pomet', 'Sovpadeniye', 'Bokser']];
arr [номер одного из массивов] [номер ячейки] - доступ к ячейкам
					       двумерного массива

- трехмерный массив (как двумерный, но еще одна плоскость в глубину
		     как кубик рубика с 3-мя гранями)
	пример: arr = [[['pnh', 'Kompot'],['kar-kar', '1XBET']],
                [['Bashmachek', 'Pomet'], ['Sovpadenie', 'Bokser']]];
arr [] [] [] - доступ к ячейке внутри трехмерного массива.

console.log(имяМассива.length) - узнать число объектов в массиве
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

!                                   ***Операторы***
Унарные (uno=1) - используются с одим значением
	+    используется для конвертации в число, если после + будет не 
	     число, то оно будет пытаться преобразовать его в число.
	     пример +'5'=5; +true=1; +fals=0;
	-    используется, чтобы сделать число отрицательным a=5; -a; -5
       ++    оператор ИНКРИМЕНТа. Используется ТОЛЬКО с переменными и не
	     может использоваться с простыми значениями.
		++a инкремент до переменной (префиксный инкремент) делает
		    увеличение значения на +1.При этом значение изменя-
		    ется и в переменной а=5; ++a; 6.
		a++ инкремент после переменной (постфиксный инкремент)
		    Увеличивает на +1 значение в переменной, но не меняет 
		    значение переменной.
		    a=5; > a++; > 5; > a; > 6.
	--   оператор ДИКРИМЕНТа.
		--a делает -1 к значению;
		a-- делает -1 к значению;
	> <   чтобы проверить больше или меньше одно значение, 
	      чем другое;
	>=    больше или равно;
	<=    меньше или равно; 
	==    равенство. Проверяет равны ли значения 5==5. При сравнении 
	      разных типов, все преобразует к числам;
	===   Строгое равенство. Сравнивает, как равенство, но уже не будет
	      сравнивать строку и число. ТОЛЬКО одинаковый тип символов.
	      ЛУЧШЕ СТАВИТЬ ЕГО.
 	
        +=    сокращенное присваивание. К текущему значению переменной
	      прибавляет оператор, т.е. +5. Пример: a=5; a += 5;   10.
	-=    сокращенное присваивание. От текущего значения переменной
	      отнимает оператор, т.е. -2 Пример: а=5;  a -=2;   3.
	*=    сокращенное присваивание. Умножает;
	/=    сокращенное присваивание. Делит;
	%=    сокращенный оператор. Остаток от деления
	!=    не равно. Без учета типа файла;
       !==    строго не равно. С учетом типа файла;

Бинарные (bi=2) - используются с двумя значениями
	= записываем данные в переменные a = 5;
	+ сложить числа a = 5 + 5;
		'a'+'b' сложение строк прим: 'Бро' + ' ТЫ ' + 'ПРО!';
	- вычесть одно число из другого a = 10 - 5;
	* умножить числа a = 5 * 5;
	/ делить числа a = 10 / 2;
	** возведение в степень (умнжение числа самого на себя несколько
				 раз) a = 2 ** 3; a=2*2*2=8.
	% остаток от деления a = 28 % 5 (берем левое значение 28 и начинаем
			     от него считать вниз, ищем число, которое
			     делится на него без остатка: 28,27,26,25.
			     25 делится на 5 без остатка. Теперь от 28-25
			     получаем 3 - это и есть остаток от деления. 
			     Если хотим получить остаток от деления числа
			     которое и так делится без остатка 25 % 5= 0.
			     Если левое число менье правого 10 % 100, то
			     остатком от деления всегда будет левое значение
			     то есть 10)
	() то что в скобках выполнится первым;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!                           ***Условный Оператор IF***
if //если
else //иначе	
	if (условие) {
	                  // тот блок, который выполнится, если условие
	}                    совпадает

***Пример:
	const courseStatus = 'pending'

	if (courseStatus === 'ready') {                         //это проверится
   	   console.log('Курс уже готов и его можно проходить')
	}

	else if (courseStatus === 'pending') {                  //это проверится, только в том случае, если первое уловие не удовлетворительно
   	   console.log('Курс пока находится в процессе разработки')
	}
	else {                                                  //это проверится, если первый два условия не удовлетворительны
    	   console.log('Курс не получился')
	}

Если нужно ноль действий, то фигурные скобки пустые.
Всегда выполняется одно условие, то пишем или IF или ELSE IF.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             ***SWITCH***
SWITCH = IF = если 

структура:
SWITCH (значение для сравнения) {
case "c чем сравнивать 1":
  действия1
  break;
case "c чем сравнивать 2":
  действия1
  break;
default:
  действие когда условия не подошли;
}

let a = 50;
switch (a) {
  case 5:
  console.log('SMALL');
  break;
case 50:
  console.log('MEDIUM');
  break;
case 100:
  console.log('HUGE');
  break;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!                          ***Тернарный оператор***
Применяется, когда нужно выбрать одно из двух значений.
Применяется для простых условий.

Формат:
	          если true     если fals
	условие ? результат1 : результат2
	        if         else  
          5 > 4  ?      1    :       0 

***Пример: 
	const isReady = true

	isReady ? console.log('Все готово!') : console.log('Все не готово!')
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             ***Цикл WHILE*** - цикл с предусловием
while (условие) {
	тело_цикла;
}
			пример:
counter = 1;
while (counter <= 5) {
	consol.log('counter' + counter);
	counter = counter + 1;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!                                ***Цикл FOR***
for (начальное_значение_счетчика; условие_продолжения; шаг счетчика) {
	тело_цикла;
} 

***Пример:
for(let counter = 1; counter <=5; counter = counter +1) {
consol.log('Сядь');
consol.log('Встань');
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                           ***Цикл DO WHILE*** - цикл с постусловием
do {
	тело_цикла;
      } while (условие);

				пример:
do {
	console.log('I TOLD YOU!!!');
    } while (false);
I TOLD YOU!!!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!   			     ***Функции ***
function name(параметр) 
{
   тело функции
}
 
***Пример:                 
function greet(name) {
    console.log('Привет - ', name )
}
greet('Pavel')

			    ***Стрелочные функции***


const average = (a, b) => {
    return (a + b) / 2;
}
   console.log(average(1, 5))



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
				***Интерполяция***
const firstName = 'Joffrey';
const greeting = 'Hello';

// Обратите внимание на ограничители строки, это бектики
// Интерполяция не работает с одинарными и двойными кавычками

console.log(`${greeting}, ${firstName}!`);
// => 'Hello, Joffrey!'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			***Извлечение символов из строки***

const firstName = 'Tirion';

console.log(firstName[0]); // => 'T'
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                               ***Предикты***
Функции-предикаты (или функции-вопросы) отвечают на какой-то вопрос и 
всегда (без исключений!) возвращают либо true, либо false.

Предикаты во всех языках принято именовать особым образом для простоты 
анализа. В JavaScript предикаты, как правило, начинаются с префикса is,
has или can, но не ограничены этими словами/

***Пример:
const isInfant = (age) => age < 1;

isInfant(3); // false



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!				    ***
camelCase - хороший стиль написания, когда новое слово начинается с большой
            буквы;
console.log ('текст');  - вывести текст в консоль;
alert('текст')          - вывод окна с текстом в браузере;
prompt('текст')         - вывод окна для ввода текста в браузере;
console.log(typeof имяПеременной) - покажет в консоли тип данных
BREAK 		        - заканчивает цикл;
CONTINUE 		- сразу переходит к следующей этерации цикла
console.log(Math.   )   - различные математические операции
console.log(имяПеременной.  ()) - различные операции с текстом
length()      - считает количество символов в строке
Math.pow()    - возводит указанное число в нужную степень
trim()        - удаляет пробельные символы с начала и конца строки
return        - что-то возвращает из функции
.replace()    - что-то меняет в строке //'google'.replace('go', 'mo'); // 'moogle'
.slice()      - что-то вырезает из слова //'hexlet'.slice(1, 3); // 'ex'
.toUpperCase()- преобразовывает все буквы в строке к верхнему регистру
.toLowerCase()- преобразовывает все буквы в строке к нижнему регистру 
&&            - означает «И» (и то, и другое)
||            - означет «ИЛИ» (или то, или другое, или оба)
indexOf()     - ищет фрамент строки и выводит номер позиции

JSON.parse()  - спарсить Response. Пример: let jsonDataResp = JSON.parse(responseBody)
                Спарсить Request:
GET METHOD:  let jsonDataReq = pm.request.url.query.toObject()
POST METHOD: let jsonDataReq = request.data
JSON.stringify() - преобразует значение JavaScript в строку JSON


