console.log ('текст');  - вывести текст

			***Переменные и константы***
var и let  - объявляет переменную    
имя переменной начинается ТОЛЬКО с букв, "$" и  "_".Может содержать цифры
	let age;                                             
	age = 34;  // назначил переменную// 

const      - объявляет константу
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                             ***Типы Данных***
Number - числа 
	- целые;
	- десятичные (с плавающей запятой); 
	- NaN (Not a Number) ошибка вычисления;
	- inf (Infinity=бесконечность) прим: let inf = 20 / 0; 

BigInt - очень большие числа. В конце каждого числа стоит "n" 

String - строка. Обязательно в 'ковычках' 
	\n - переводит текст на новую строку;
	\' - ставит одинарную ковычку прим. 'This is \'Sparta\';
	\" - ставит двойную ковычку "And \"Cola\" please";
	\\ - ставит слеш в качестве текста "Like\\Dislike"; выведет => Like\Dislike
	\t - кнопка Tab  "бла бла	блабла"; 

Boolean - логика.
	- true - истина;
	- false - ложь;

Null - значение пустое или неизвестно;

Undefined - неопределено. Переменная объявлена, но значение не установленно;    	

Object - объект.
	let monitor = {
	   name: 'SMATRON',
	   ewight: 3.3,
	   resolution: 27,
	   rotate: false
	};

Symbol - уникальное значение.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                    ***Массив*** 
-одномерный (простое значение); 
	пример: let arr = ['PNH', 'kar-kar', '1XBET'];
arr[номер(индекс) ячейки)] - доступ к ячейке внутри массива, 
		             нумерация с 0. 	

- двумерный (значение - другой одномерный массив);
	пример: arr = [['pnh', 'kar-kar', '1XBET'], 
	       ['Kompot', 'Pomet', 'Sovpadeniye', 'Bokser']];
arr [номер одного из массивов] [номер ячейки] - доступ к ячейкам
					       двумерного массива

- трехмерный массив (как двумерный, но еще одна плоскость в глубину
		     как кубик рубика с 3-мя гранями)
	пример: arr = [[['pnh', 'Kompot'],['kar-kar', '1XBET']],
                [['Bashmachek', 'Pomet'], ['Sovpadenie', 'Bokser']]];
arr [] [] [] - доступ к ячейке внутри трехмерного массива.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                   ***Операторы***
Унарные (uno=1) - используются с одим значением
	+    используется для конвертации в число, если после + будет не 
	     число, то оно будет пытаться преобразовать его в число.
	     пример +'5'=5; +true=1; +fals=0;
	-    используется, чтобы сделать число отрицательным a=5; -a; -5
       ++    оператор инкремента. Используется ТОЛЬКО с переменными и не
	     может использоваться с простыми значениями.
		++a инкремент до переменной (префиксный инкремент) делает
		    увеличение значения не +1.При этом значение изменя-
		    ется и в переменной а=5; ++a; 6.
		a++ инкремент после переменной (постфиксный инкремент)
		    Увеличивает на +1 значение в переменной 
		    a=5; > a++; > 5; > a; > 6.
	--   оператор дикримента.
		--a делает -1 к значению;
		a-- делает -1 к значению;
	> <   чтобы проверить больше или меньше одно значение, 
	      чем другое;
	>=    больше или равно;
	<=    меньше или равно; 
	==    равенство. Проверяет равны ли значения 5==5. При сравнении 
	      разных типов, все преобразует к числам;
	===   строгое равенство. Сравнивает, как равенство, но уже не будет
	      сравнивать строку и число. ТОЛЬКО одинаковый тип символов.
	
 	
        +=    сокращенное присваивание. К текущему значению переменной
	      прибавляет оператор, т.е. +5. Пример: a=5; a += 5;   10.
	-=    сокращенное присваивание. От текущего значения переменной
	      отнимает оператор, т.е. -2 Пример: а=5;  -=2;   3.
	*=    сокращенное присваивание. Умножает;
	/=    сокращенное присваивание. Делит;
	%=    сокращенный оператор. Остаток от деления
	!=    не равно. Без учета типа файла;
       !==    строго не равно. С учетом типа файла;

Бинарные (bi=2) - используются с двумя значениями
	= записываем данные в переменные a = 5;
	+ сложить числа a = 5 + 5;
		'a'+'b' сложение строк прим: 'Бро' + ' ТЫ ' + 'ПРО!';
	- вычесть одно число из другого a = 10 - 5;
	* умножить числа a = 5 * 5;
	/ делить числа a = 10 / 2;
	** возведение в степень (умнжение числа самого на себя несколько
				 раз) a = 2 ** 3; a=2*2*2=8.
	% остаток от деления a = 28 % 5 (берем левое значение 28 и начинаем
			     от него считать вниз, ищем число, которое
			     делится на него без остатка: 28,27,26,25.
			     25 делится на 5 без остатка. Теперь от 28-25
			     получаем 3 - это и есть остаток от деления. 
			     Если хотим получить остаток от деления числа
			     которое и так делится без остатка 25 % 5= 0.
			     Если левое число менье правого 10 % 100, то
			     остатком от деления всегда будет левое значение
			     то есть 10)
	() то что в скобках выполнится первым;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                           ***Условный Оператор IF***
if/если (условие) действие
	let a = 4;
	let b = 10;
	if (b > a) a = 100;
	100
	a;
	100
следующие значения всегда будут преобразованы в False:
	0
	""
	null
	undefined
	Nan
все остальное преобразуется в True.
Чтобы сделать блок действий оборчаиваем все в фигурные скобки
{   }
Если нужно ноль действий, то фигурные скобки пустые.

ELSE (иначе) - альтернативное действие
Всегда выполняется одно условие, или IF или ELSE.
	a = 100;
	if (a > 5000)
	a = a - 5000;
  	else 
	a = a -50;
Пример со многими ЕСЛИ
a = 13000;
if (a>= 500000) {
 a = a - 500000;
} else if (a >= 100000){
a = a - 1000000;
} else if (a > 12000) {
a = a - 12000;
} else {
a = a - 50;
}	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                             ***SWITCH***
SWITCH = IF = если 

структура:
SWITCH (значение для сравнения) {
case "c чем сравнивать 1":
  действия1
  break;
case "c чем сравнивать 2":
  действия1
  break;
default:
  действие когда условия не подошли;
}

let a = 50;
switch (a) {
  case 5:
  console.log('SMALL');
  break;
case 50:
  console.log('MEDIUM');
  break;
case 100:
  console.log('HUGE');
  break;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                          ***Тернарный оператор***
форат:
	          если true     если fals
	условие ? результат1 : результат2
	        if         else  
          5 > 4  ?      1    :       0 

пример: let a = 5 > 0 ? 1 : -1
	a;
	1


	
	



 
	
	




	               
            


















                                                   
